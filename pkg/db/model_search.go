// Code generated by mfd-generator v0.6.0; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"time"

	"github.com/go-pg/pg/v10"
	"github.com/go-pg/pg/v10/orm"
)

const condition = "?.? = ?"

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

type search struct {
	appliers []applier
}

func (s *search) apply(query *orm.Query) {
	for _, applier := range s.appliers {
		query.Apply(applier)
	}
}

func (s *search) where(query *orm.Query, table, field string, value interface{}) {
	query.Where(condition, pg.Ident(table), pg.Ident(field), value)
}

func (s *search) WithApply(a applier) {
	if s.appliers == nil {
		s.appliers = []applier{}
	}
	s.appliers = append(s.appliers, a)
}

func (s *search) With(condition string, params ...interface{}) {
	s.WithApply(func(query *orm.Query) (*orm.Query, error) {
		return query.Where(condition, params...), nil
	})
}

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier

	With(condition string, params ...interface{})
	WithApply(a applier)
}

type MessageReactionSearch struct {
	search

	ReactionsCount  *int
	MessageID       *int
	ChatID          *int64
	CreatedAt       *time.Time
	MessageIDs      []int
	ChatIDs         []int64
	ReactionsPeriod *time.Time
}

func (mrs *MessageReactionSearch) Apply(query *orm.Query) *orm.Query {
	if mrs == nil {
		return query
	}
	if mrs.ReactionsCount != nil {
		mrs.where(query, Tables.MessageReaction.Alias, Columns.MessageReaction.ReactionsCount, mrs.ReactionsCount)
	}
	if mrs.MessageID != nil {
		mrs.where(query, Tables.MessageReaction.Alias, Columns.MessageReaction.MessageID, mrs.MessageID)
	}
	if mrs.ChatID != nil {
		mrs.where(query, Tables.MessageReaction.Alias, Columns.MessageReaction.ChatID, mrs.ChatID)
	}
	if mrs.CreatedAt != nil {
		mrs.where(query, Tables.MessageReaction.Alias, Columns.MessageReaction.CreatedAt, mrs.CreatedAt)
	}
	if len(mrs.MessageIDs) > 0 {
		Filter{Columns.MessageReaction.MessageID, mrs.MessageIDs, SearchTypeArray, false}.Apply(query)
	}
	if len(mrs.ChatIDs) > 0 {
		Filter{Columns.MessageReaction.ChatID, mrs.ChatIDs, SearchTypeArray, false}.Apply(query)
	}
	if mrs.ReactionsPeriod != nil {
		Filter{Columns.MessageReaction.CreatedAt, *mrs.ReactionsPeriod, SearchTypeGE, false}.Apply(query)
	}

	mrs.apply(query)

	return query
}

func (mrs *MessageReactionSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		if mrs == nil {
			return query, nil
		}
		return mrs.Apply(query), nil
	}
}
